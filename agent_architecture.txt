Updated Agent Architecture Overview
=====================================

Core Components
---------------
1. Agent (agent/agent.py)
   - Main orchestrator class.
   - **Composes:**
     * CognitiveEngine (agent/cognitive_engine)
     * Retriever (agent/retriever)
     * Toolkit (agent/toolkit)
   - **Key Methods:**
     * setup() -> None
     * load_data_to_vector_db() -> None
     * respond(input: Input) -> str

2. CognitiveEngine (agent/cognitive_engine/__init__.py)
   - Handles reasoning and LLM interactions.
   - **Dependencies:**
     * LLM Provider (agent/llm.py): Provides the interface to generate responses.
   - **Key Methods:**
     * respond(input: Input, reference_documents: List[Dict], tools: Dict[str, BaseTool], state: ReasoningState) -> Tuple[str, ReasoningState]
     * _reason(reasoning_state: ReasoningState) -> str
     * _send_message(messages: List[dict]) -> Tuple[dict, str]

3. Retriever (agent/retriever/__init__.py)
   - Manages document retrieval and vector search.
   - **Dependencies:**
     * Embedding Provider (agent/retriever/embeddings.py): Generates embeddings from text.
     * Vector DB (agent/retriever/vector_db.py): Stores vectors and performs similarity searches.
     * Data Source / Reference Documents (agent/retriever/reference_documents): Source documents for embedding and retrieval.
   - **Key Methods:**
     * setup() -> None
     * load_data_to_vector_db() -> int
     * query_and_retrieve(query: str) -> List[BaseReferenceDocument]

4. Toolkit (agent/toolkit/__init__.py)
   - Manages available tools that extend the agent's capabilities.
   - **Dependencies:**
     * Tools (agent/toolkit/tool.py, etc.): Collection of BaseTool implementations (e.g., CodeExecutionTool).
   - **Key Properties:**
     * tools: Dict[str, BaseTool]


Supporting Abstract Base Classes
----------------------------------
- **BaseLLMProvider** (agent/llm.py): Interface for LLM providers.
- **BaseEmbeddingProvider** (agent/retriever/embeddings.py): Interface for embedding providers.
- **BaseVectorDB** (agent/retriever/vector_db.py): Interface for vector databases.
- **BaseTool** (agent/toolkit/tool.py): Interface for tool implementations.
- **BaseConnection** (agent/connections.py): Interface for connection management.

Models and Data Classes
------------------------
- **Input** (agent/input.py): Represents user input.
- **ReasoningState** (agent/cognitive_engine/models.py): Tracks the reasoning process.
- **BaseReferenceDocument** (agent/retriever/reference_documents/__init__.py): Base class for reference documents.

Configuration Classes
---------------------
- **AgentConfig** (agent/config.py): Aggregates configurations for Agent components.
- **CognitiveEngineConfig** (agent/cognitive_engine/config.py): Configurations for CognitiveEngine including the LLM provider.
- **RetrieverConfig** (agent/retriever/config.py): Configurations for Retriever components including the embedding provider, vector DB, and data sources.
- **ToolkitConfig** (agent/toolkit/config.py): Configurations for the tools available in the Toolkit.


Data Flow
---------
1. User Input → Agent.respond()
2. Agent.respond() → Retriever.query_and_retrieve() for fetching reference documents.
3. Agent.respond() → CognitiveEngine.respond() (which internally calls the LLM Provider).
4. CognitiveEngine may invoke tools (via Toolkit) based on reasoning steps.
5. Final response is generated and returned to the user.


Component Relationships Summary:
----------------------------------
- **Agent** ⇒ CognitiveEngine, Retriever, Toolkit
- **CognitiveEngine** ⇒ LLM Provider
- **Retriever** ⇒ Vector DB, Embedding Provider, Data Source (Reference Documents)
- **Toolkit** ⇒ Tools
